"""
 ____                        _   _
|  _ \ _____      _____ _ __| | | |_ __
| |_) / _ \ \ /\ / / _ \ '__| | | | '_ \
|  __/ (_) \ V  V /  __/ |  | |_| | |_) |
|_|   \___/ \_/\_/ \___|_|   \___/| .__/
                                  |_|

Perpetrated by Â© Osama Elazab since 2024
"""

from PIL import Image, ImageTk
from PIL.ImageTk import PhotoImage

import tkinter as tk
from tkinter import messagebox

import base64
import tempfile
import logging
import os
import sys
import io

from Bg_Thread import  Live_Thread

# The GUI handler class (tkinter-based)
class GUI_Handler:
    # To enable debugging mode
    debug_mode = False

    def __init__(self):

        # Basic GUI widgets
        self.window = None
        self.main_frame = None
        self.input_label = None
        self.time_input = None
        self.stop_button = None
        self.logo_button = None
        self.exit_button = None
        self.start_button = None
        self.pause_button = None
        self.timer_label = None

        # Background thread
        self.bg_thread = None

        # Basic parameters
        self.delay :int = 100
        self.time_counter :int = 0
        self.cyclic_time :int = 1000
        self.timer_default_txt:str = "00:00:00:00"
        self.workspace :str = os.getcwd()

        self.timer_bg1 :str = '#78C3D3'
        self.timer_bg2 :str = '#166879'
        self.default_bg :str = '#FFFFFF'

        self.meta_data :str = "Version: 1.0.0\nDate: Sep 2024"

        # Start logging (activated in debugging mode only)
        self.logger = self.setup_logger(name='main',log_file='app.log',output_file=False)
        self.logger.info("------------- [ Start of logging ] -------------")

    # Setup logger for debugging purpose only
    def setup_logger(self, name:str, log_file:str,output_file:bool) -> logging.Logger:

        # Only enable logger when debug mode is activated
        log_level = logging.INFO if GUI_Handler.debug_mode else logging.CRITICAL+1

        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s", datefmt="%Y-%m-%d %H:%M:%S")

        # Screen handler
        screen_handler = logging.StreamHandler(sys.stdout)
        screen_handler.setFormatter(formatter)

        # File handler
        if output_file:
            file_handler = logging.FileHandler(log_file, 'w')
            file_handler.setFormatter(formatter)

        # Basic logger
        logger = logging.getLogger(name)
        logger.setLevel(log_level)
        logger.addHandler(screen_handler)
        if output_file: logger.addHandler(file_handler)

        return logger

    # Application widgets related methods
    def widgets_design(self )-> None:
        # Images sources
        logo_photo :PhotoImage = self.load_logo_image()
        start_photo :PhotoImage = self.load_start_image()
        pause_photo :PhotoImage = self.load_pause_image()
        stop_photo :PhotoImage = self.load_stop_image()

        # Main window frame
        self.main_frame = tk.Frame( self.window ,bg=self.default_bg)

        # Buttons
        self.logo_button = tk.Button(self.main_frame ,bd=0 ,borderwidth=0 ,command=self.show_info, highlightthickness=0
                                     ,image=logo_photo)
        self.logo_button.image = logo_photo
        self.start_button = tk.Button(self.main_frame ,bd=0, command=self.start, borderwidth=0, highlightthickness=0, image=start_photo)
        self.start_button.image = start_photo
        self.pause_button = tk.Button(self.main_frame ,bd=0 ,command=self.pause ,borderwidth=0, highlightthickness=0
                                      ,image=pause_photo)
        self.pause_button.image = pause_photo
        self.stop_button = tk.Button(self.main_frame ,bd=0 ,command=self.stop ,borderwidth=0, highlightthickness=0,
                                     image=stop_photo)
        self.stop_button.image = stop_photo

        # Timer label
        self.timer_label = tk.Label(self.main_frame, fg='black', bg=self.timer_bg1, text=self.timer_default_txt, font=('Digital-7', 20))

    # Positioning widgets in grid system
    # Logo button | start button | pause button | stop button
    #                    timer label
    def widgets_position(self) -> None:
        # Main frame widgets
        self.main_frame.grid(row=0, column=0, pady=5, padx=5)

        self.logo_button.grid(row=0, column=1, padx=(0, 45))
        self.start_button.grid(row=0, column=2, padx=(3, 0))
        self.pause_button.grid(row=0, column=3, padx=(45, 0))
        self.stop_button.grid(row=0, column=4, padx=(45, 3))

        self.timer_label.grid(row=1, column=0, columnspan=5, sticky='ew', pady=(5, 0), ipady=7)

    # Cyclic method -> to be called every 1000ms(1 second)
    def cyclic_update_1000ms(self) -> None:

        if self.bg_thread:
            # While the thread is ongoing -> start timer effects
            if self.bg_thread.is_alive():
                self.increment_timer_actions()
                self.toggle_timer_background()
                self.logger.info("Background thread is now running...")

            # Thread has finished
            else:
                # Check if thread finished in error or not
                if self.bg_thread.error:
                    self.timer_to_error("Error in Background thread!!")
                    self.logger.error("Background thread thread returned error:")
                    self.logger.error(f"{self.bg_thread.error}")

                self.bg_thread = None

        # Recall itself
        self.window.after(self.cyclic_time, self.cyclic_update_1000ms)

    # Construct the timer string format
    # Format: DAYS:HOURS:MINUTES:SECONDS
    def get_time_format(self,counter: int) -> str:
        days, remainder = divmod(counter, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        formatted_string: str = f"{days:02d}:{hours:02d}:{minutes:02d}:{seconds:02d}"
        return formatted_string

    # Widgets properties editors

    # Toggle timer background every 2 seconds
    def toggle_timer_background(self) -> None:
        if self.time_counter % 2 == 0:
            self.set_timer_bg(self.timer_bg1)
        else:
            self.set_timer_bg(self.timer_bg2)

    def update_timer_text(self, txt: str) -> None:
        # Check for timer overflow
        days:int = int(txt.split(':')[0])
        if days > 99:
            self.reset_timer_actions()
        else:
            self.timer_label['text'] = txt

    def set_timer_bg(self, bg: str) -> None:
        self.timer_label['bg'] = bg

    # Timer incremental actions
    def increment_timer_actions(self) -> None:
        self.time_counter += 1
        time_str: str = self.get_time_format(self.time_counter)
        self.update_timer_text(time_str)

    def timer_to_error(self, txt: str) -> None:
        self.timer_label['bg'] = 'red'
        self.timer_label['text'] = txt

    def set_timer_counter(self, num: int) -> None:
        self.time_counter: int = num

    def set_timerLabel_text(self, txt: str) -> None:
        self.timer_label['text'] = txt

    def disable_start_button(self) -> None:
        self.start_button['state'] = 'disabled'

    def disable_pause_button(self) -> None:
        self.pause_button['state'] = 'disabled'

    def disable_stop_button(self) -> None:
        self.stop_button['state'] = 'disabled'

    def enable_start_button(self) -> None:
        self.start_button['state'] = 'normal'

    def enable_pause_button(self) -> None:
        self.pause_button['state'] = 'normal'

    def enable_stop_button(self) -> None:
        self.stop_button['state'] = 'normal'

    # Widgets default state
    def init_buttons_state(self) -> None:
        self.disable_pause_button()
        self.disable_stop_button()

    def widgets_init_list(self) -> None:
        self.reset_timer_actions()
        self.init_buttons_state()

    def reset_timer_counter(self) -> None:
        self.set_timer_counter(0)

    def reset_timer_actions(self) -> None:
        self.set_timerLabel_text(self.timer_default_txt)
        self.set_timer_bg(self.timer_bg1)
        self.reset_timer_counter()

    def terminate_thread_actions(self) -> None:
        if self.bg_thread:
            self.bg_thread.terminate()
            self.bg_thread = None

    def start_thread_actions(self) -> None:
        if not self.bg_thread:
            self.bg_thread = Live_Thread()
            self.bg_thread.start()
            self.logger.info("Background thread is signaled")

    def show_info(self) -> None:
        messagebox.showinfo('Info', self.meta_data)

    # Start background thread
    def start(self) -> None:
        self.start_thread_actions()
        self.enable_pause_button()
        self.enable_stop_button()
        self.disable_start_button()
        self.logger.info("Background thread started")

    # Pause background thread
    def pause(self) -> None:
        self.terminate_thread_actions()
        self.disable_pause_button()
        self.enable_start_button()
        self.logger.info("Background thread paused")

    # Stop background thread
    def stop(self) -> None:
        # Reset timer to 0
        self.reset_timer_actions()
        self.terminate_thread_actions()
        self.disable_stop_button()
        self.disable_pause_button()
        self.enable_start_button()
        self.logger.info("Background thread stopped")

    # Stop everything (foreground+background)
    def exit(self) -> None:
        self.terminate_thread_actions()
        self.window.destroy()
        self.logger.info("Application is closing")
        self.logger.info("------------- [ End of logging ] -------------")
        sys.exit(0)  # Forcefully terminate the program

    # Convert all images to bytes so that they could be embedded inside .exe
    # Without any external dependencies
    def load_logo_image(self) -> PhotoImage:
        binary_img: Image = Image.open(io.BytesIO(bytearray(
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00:\x00\x00\x009\x08\x06\x00\x00\x00g/8\x86\x00\x00\x10\x01IDATx\x9c\xed\x9a{\x94]uu\xc7?\xfb\xf7;\xe7\xdcs\x1fsg2\xcfLf\xf2"\xa0X\x15\x01\x05+*\xa0V\\\xad\x16\xc4\xfah\x11m\xd7\x12[Y\xbeu\x15\x1fU\x8a\x88Z\xc0U|4\xb6\xb5Z\x95\xf2(\x16]E\xc0\x07\xf8\x08\xe2kA\x11\x93\x88\x04&\x103\xc9L\x92\xe1f^w\xee\xeb\x9c\xf3\xfb\xfd\xfa\xc7\xb93\x99\x99\xdcI2I\xd0\xb5\xd4\xbd\xd6]\xe7\xde{\xce\xf9\xed\xfd\xdd{\xff\xf6o\xef\xfd\xfb\x89s\xce\xf1{@\xea\xb7-\xc0o\x8a\xfe\x00\xf4w\x8d\xbc\'\x9b\x81i\x8c\xe3fv\xe3fFp\x8d\x12.\x9a\x04\x13\x83\x97C\x85]H\xae\x17\xc9\r\xa0\xf2\x83\x88\x17>ir<)@\x93\x89!\xec\xf0\x1d\xc4{7\xc1\xccnH\xa6\x11\x13\x81@\xeaD\n\x87\x01gAy\xa0\x02\xc8t\xa3;\x9f\x81\x1ex1\xde\xfaW#r|\x9dM\x8eW\xd4u@<t#\xf1\xd6\xebp\xd5]H\xa6\x1d\xe5w"J\x81(\x9a(\x9bO\xb2\xe8\xb7\x03\xe7p\xb6\x81\xad\x95pI\x1d\xb5\xf6|\x82\xa7\xbe\x19\xaf\xef\xcc\xe3!\xde\xf1\x01\x1a?\xfe5\xa2\x9f\x7f\x14\xb1\x11\x12\xe4\x11\x9d\xc1!\x08\xcb\x19\xda\x01\x82CRK\xc7\x15lRGu<\x8d\xe0\x85\x9fC\xe7\xfa\x8fI\xc6c\x02j\x1b\x93\xd4\xef\xbd\x14\xbbw\x13\xbam-\xa2\x96\x98\tn\xde\x17\x91\x83\xff\x17fq\xb6\xe01\x8d\x8b\xcax\xcf|7\x99g\xbe\xe3hE=z\xa0\xf1\xf07i\xfc\xf0M\xa8l/*(\xc2b\xeb\xcd\n\xaeR\x14\xce:\x9c\xb58\x0bX\x07J!\x1aD)D\t8\x07\x96\xf4\x8a\x1c\x04\xda\x94\x87\x91\xf6\x93\xc9\xbe\xf4\xebHP\xf8\xcd\x00m\xfc\xea\xdf1\x9b?\x8e\xe4W!\xa2\x0f\x06\xa8\xc0\x89\xe0j\x11f*\xc1T"$\x02\xe7\\\n\x12R\xcb\n\xa0\x15\x12\n\xba\x18\xa0\xda|\x94\xafR\xc0v\x91\xf5\x11\\4\x85\xd3y2/\xba\x01\xdd\xbe\xe1\xc9\x05\xdax\xe0*\x92m\xff\x86.\xaek\t\x10-\x98\xfd5\x92\'"\\\xc3\xa2\x14\xa9UU\x0b\xbf\x9c%\xebp\x89\xc3*\xd0y\x857\x90Ge<\x88\xdd"\xcb\n.\x9e\xc16f\x08\xcf\xbf\x17\x9d_y\xc4r/\x0bh}\xf3?\x93\xfc\xf2Z\xbc\xe2I\x80aN\n\x07NC\xd8\x88\x90\xd12#\xe3\n\xe7ytd-n\xb99\x89u$\xb5\x04\xd5\xe9\xe3\x0f\xe4Q\xbai\xe1\xf9S\xdb\xc6\x98\xea>r\x17\xdc\x87\xca\xf5\x1e\xd1\xb0G\x0c4\x19\xd9D\xfd\x9e7\xe0\xb5\xad\x9d\xc7\xb1y\xd1 \xa33\xfc\xec!\xc3\x17\xb7e8w\x8d\xe5\xac\x81\x84\xd5m\x16\':UD\xf3\x05iJ\xec\x9a\xffH\x8b\xf9\x08`c\x83\x13\xf0\x06rx\x1d\x190\x0b\xc5tq\x05\x17\xf6\x12\x9ew;\xca\x0b\x8e\x0fP\x13\x95\xa9\xdf~6\xda\x0b\xd2\x05~\xbe%}\x88\x1e\x9e&i\x18\xa6\xac\xa6\'\xeb\xc8\xf9\xa0\xb5\xa3\x1e\t\x91U\xe9t\xf4d.0aI\x03\x10\xe0\x12\x8b\xb3\xe9\x92\xe2l\x82\x8bk\xe0,\xe2gA\xf9\xd8\xc8\xe2\rf\xf1\xba\xb3\x8b\\Y0\xb51\xbc5\x17\x90\xf9\xe3k\x8e\x1d\xa8\x03\xeaw\xbd\n\xca\xdb\x91\xa0\xb8\xe8\x9e\x83\xed\x93x\x02~\xa8\x88#\x87u\x8a\xd88\xee\xdf\xa3\xa8;\xcd\xd9\x831\xb5rB4\x11c\xeb\x06\x93\xa4\xb2\x8ar\x88\'\xf8E\x1fO*\xa8\xbcF\xaf:\x15\xdd\xb5\x01\xbc\x107\xb1\x8bx\xf4\xe7\xa8\xea$V\x17\xf1\xfar\xf8\x83\x05\x88\xcc\xbc %$\x93\x8f\x12\xbe\xe4\xabx\xab\xce96\xa0\xc9\xe8=46]\x8c^\xe0\xb2\x0e|E24\xc5/w;\xbe\xb3+`\xa8\xa4x\xce*\xc3s\xfa-\xa7\xf7[4\x8e\x1d\xbfn\x90\xab\xc7`\x85\x82o\xa99=\xb7r8\xd2(l&Jd_\xf8:\xba_\xf3^T\xa1\x87\x03\x9a\xd0\xb8\xa8F\xb4\xfd\xfbT\xef\xba\x12I\xc0_\xdf\x85^\x11\xa4svV\x14\x13c\x9d#\xf7\xca\x9f\x1d2m<,\xd0\xca\xed\xe7\xa0M\r\xf4\xbcy\xa0\x85x\xb4B\xb2\xbf\x81\x11Ew\xc1\xf1\xebIa]\xbb\xa3l5\x8d\x89\x88\xca\x9e:\x9e\x03\xe7+\x06\xc2\x84[\x87\xb3\\0Xc\xac\xe1\xcf\x05\xe0\xc6\xe8\xe3\xf4^v=\xf93\xcf\x87\xc9}i\xb2??{\x10\x81l\'f\xa6D\xf9\xfa\xd7@-"xf\x0f\xcaS\xf3\x96m\xc1\x96w\xe2?\xf7Z\xfc\r\xaf[\x12\xc7!Cb<\xf2=\x98~\x0ctf\x9ej \xa9\xc4\x98\xb1\x06:\xf0\xc8x\x8a\xe9\xba\xa6;\x14f\xacGu\xb4JeW\rO+\x9c\xaf\xe9\x0f\x13>\xffH\x81\xd7~u\x80\xcf\r\x15\x18\xcc\xc6X\'\xc4\x93\xfb\xe8|\xe3\'R\x90\xfbw\x831iN,r\xe0\nP)\xa139\x8a\x97\xdc\x0e\xf1\x04\xd1\x8e\xe9\xb9@\x96\x92C\x15\x06\x89\x1f\xbc\x1a\xace):4\xd0\x87>\xdb\x0c\xdf\xb3\xe15\xfdfF*\xa8\x8cN\xe3\x824oh\xa1:V\xa3\xfeD\x8c\x1f\xa6\x01\xab\'0\xdc\xb9+\xe4-?\xee\x82\xd5\x11\xef\xfeQ\x17w\x8cd\xe8\xf2*\xa8\x9eu\xb4\x9f\xffV(\xedj\x02[JB\x05q\r\xe5\xe7\xc8\x9c\xfb\x1e\xdc\xe4\x04f2:\x10\xd8\x00D!\xaeF\xb4\xfb\xdb\xcb\x07j\xcb;`j\x08\xf1\xb2\x0b\x9e\xb6\x95\x08\xean.j\xe2@\xb4\xd0\x98I\xa8\xed\x8d\xf0\xb3\x1e\x0e\x08\x95\xa5\x14\t\x17\xdc\xdd\x07\xa1\xc5\x17\x079\xc7\x9f\x7fw\x80}[K\xac<\xfb\xaf \x99iV6-hvF\xcd^\xa32\x99S.D$\xc6\xec\xa93O\xcbM\xac\x01\xe6\xb1[\x96\x0f4\x19\xd9\x84\xb8\x85\x83\xa1\x85xO-]*\xe68\x803P\x1d\xae\xe2e\x14\x0e\xc8\x88#\xe3\x1b\x06o\x1c\x84\xd0\xe0{\x82\xb5\x0e_\x03A\xc2\x1f\xfdh\x1d\x95\xa7=\x1f\xe2Fk\xe6\xd6@>\xc7~c \x9f\x9d\xfbO\xe5\xba\x91\x15kpQ\x83xr\xd1\xbb~\x0e\xbb\xf7\xc78\xd7\xda}[\x02u\x80\xdd\xfbC\xf0\xfc\x85\xfc#\x83\xd4\x1d\xa2\xe7\x01UP\x1f\xaf!"\x88\x08\n\xc8z\t\xe7\xde\xd9\x07\x19A\\DG\xd7\x06<?\x87\xb5\x06_C-_\xe4\x9cK6B\xae\xed@\xec\x99cb\xa1g\x80\xab?u\x0b\xfd\'\xbe\x9e\x9d\xfb\xca\x90\x0bS\xcb*\x8d\xcau \xdaa\'\xa2\x85\xd2\x8b\x06\x17\x93\x8c\xdd\x7f\xe4@\x01\xec\xd8\xfd\xc8\xfc \x04\x98\xe9\x98\xd4\xcc\xf3-\xea\xa8\x97"\x94\xa7\xb0\x0e\xfa;\x1a\x9c\xff\xdd^\x1e(e\xf1\x83\x04\xa52d\x0b\x9d\xe4\n=\x18\x13\x03\xe0\x17sl\xf9\xd9f^\xf1\x17\xef\x87\xaeu\x07\x90Z\x0b=\xfdl\xdc\xf8\xdf\xbc\xff\x83\x9f"\xce\x06\xac[\xffg\x8cN\xd7\xa1\xbb\x1d\\\x82\xad\x97\x11\xad\xa1\x9a\xe0\xac[\xa0$\xe5gqc\xf7\x1d9PW\xdf\x0f\xb6\xd6\xcc\x82\x0e<i\xa7\xe3\x94\xc9\x1cH\x88\xab\x06b\xc1\n\x0c\xe6"\xdepw\x0f\xdf\x1f\xcd\xe1\xe5\rq\xa3FG\xef\t8k\xc8\x17\xfbP\xa2\xd3\n\xc69\xbc\xc1>\xee\xfc\xfa\xdd\\\xf6\x81OBws\xfd\xec\xe9\xe5CW\xfe+o{\xdbU\xf8kO\xc2\x0f30\xb8\x96\x81\xfe\xf3\xf8\xdam?\x85\xac\x87\x1d\xdf\x89\xe8\x00\x0c\xd8F\xb2\x10\x81\xcea\'\x1e:r\xa0\xb6:\x82sf\xd1m\x81\xc8\x90\x0b\x1csK\xaf@\\N\xc0\x13\xba\xc3\x84\xff|<\xcf\r\x0f\x17\x910\xc2\x1aC\x10\x16\xc9\xe6:q\xce\xa2D\x08\xf3\x9d\x18\x93\xa4\xafZ\x87^3\xc8\xb5\x9f\xbc\x89\x9bo\xfa&\xf4>\x9d\x0f|h#\x1f\xbb\xf2zd`u\x93?\xf8J`\xd5 \xaf\xbe\xe8\xe3\xdc|\xed\xe5\xac\xe8\n\xb1\x08\xa2\x04[\xb7\x0b\\_\x94\x8fk<\xd1\xb2\xaf\xd1\xdaukc\x0bKA\xc0ZK{\xa7\xe1\xae\xc7\x14\xc5\xd0\xcd\x05\xc3\xa4n\xe8\xcbY\x1e\xdc\xef\xf1\xa6\xbb\xfa\xa0P\xc5\xf3C\x06\xd7\x9f\xc5\xca\xb5g\xe0l\n\xcc\xba\x84B\xdbJ\x9cK\x162\xef]\xc1E\x97\\\xc3e\xef\xbd\x82\x7f\xfa\xd8\x97\xa1\xaf\x9d0l\xc7Z;\xa7P\xdf\xf3\x90\xce\x90\x8b.\xfb\t7o]A{w\x92.\x99\x91\x01;\xaf(P\xa4=\xa7\xe6\x149,P\x9b\xd4\xc1\xcdV\x19\xe98\xb9\x1e\xc7{n\xc9\xf2\xf2\xcf\xac\xe0\xb6G4\xc5\xac\xc3\x1ahS\x96\xa1\xb2\xe6\xac[\x07\xa1\xd8\xc0\xd3!\xfd\xab\x9f\x8d\xb5\x116\xae"\xb3\x1as\x8eL\xb6\x88\xe7\xe7\x16DF\xdf\xd3\xa8\xee\x0e\xae\xfd\xd2\xed\xd0\xdfM.\xd7\xc9\xea\x13\x9e\x8f8\xb5\xe09O)\xbc\xb5y.\xfaR\x917\xdf\x90\xa3\xa37F%\x0e\xd4|\xfb\t\xb8\x98\xb4\x84<\x02\xa0\xb3\xef\xa4\xa8!\xd3a\xf9\xc4\x8d\x8e\xeb6\xe5`\x95\xe1oo\xcb\x812\xe4}\x87\x128\xe3\xce~(\xc4(g\xe9\x1b<\x15k\xa2\xe6\x18\xaai\xf9f\xa7O\x84l\xa1\x07k\x93\x05\xac\xb4\x08\x04Bq\xc5j\xba\xfa\x9eJ#\x9a\xc6\x0fs\x07\xba\x11\xb3"9\xf0\xfa-_\xb8/\xcb\xc5\xd7\x17\xc8\xb7;<\xb5\xb0\x05\xb7TF\xdb\x1a\xa8\xd2\xcdv\x06d\x07\x1c\x9f\xbd\xc3\xf1\xc1\xcf{\xa8\x1e\xf0=\x18\x9b\xf0\xf8\xd8\xa6\x10\xaf7\xe6\x15\xdf\xea\xa1n5\xd8\x1a=\xabNI;\n\x1cX\xecE\x04\xad3i\x9bH4IT=\x88m\\\x9f\xa6\xd8\xb9\x8e\x8e\xae\xf58\x97`ML\x10\xe4\xd2\xdeo\x0b\xfd{\xed\x8e\x1b\xef\x0f\xb9\xf0\x8bY\xbcU\x06\xcf\x1e\x08\xbeJ4\xad\xd2\xac\x96@U\xd0\x058\xc2~\xcb\xd5\xffey\xc75\x1a\xbd\x12\xe6\xe2m\xc1\xf1\x8d\x87\x03.\xfeT\x91{\x863\xa0f\xe8Y}:\x99\xb0\x80\x9d\xcb7\x1dJ\x07DQ\x85\x9d\xdb\xbeG\x90)2Qz\x8cZy\x0c\xad\xbd9\xed\xc7Q\x8d\xeeU\xcf\xa2\xa3\xf7\x84t\xca\xa0P\xa2\xf0\xfc6\xacmm\x1d\x01\xfc\x1e\xe1\x7f\x7f\xe2q\xe2+\xc1\xef\xb1d\xbd\xb4\x01GP\\\x98\x9b\x1f\x12h~%\xb9\x1e\xc5\xc6[\xe1\xfd\x9f\xd3\xe85\xb20\x8ak\xd8:\xa5\xb9qG\x00\xb9\x1a\x1d=O%\x9b-\xe2\x9c\x9d\x0b""\x1e\xd5\xca8O\x8cl\x01\xed1Q\x1a\xa2<5\x8a\x17\xa4\x99\x8e\xb3\x86$n\xd0;p*\xd9B\x176\xaa!J\xd3h\xcc0\xb6\xf7!\x820G\xd3=Z\x93\x03\xbf\x0b\x1e\x9b\xd6\x9c\xfc\x06a\xd2X\xb2\x19\x83d\xfb[\x82j\r\xb4\xb0\x86\xeb\xee\xf0y\xdbg\x1d\xd2/\x07=\xa4\x04"#\xa0\x1b\xe4\xdbz\xe9\xea\xdd@\x127(\xed\x1bbz|\x18?\xc8Q\xafNP\x1a\xd9\x82\xf62x~\xc8\xf4\xf8.\xb4\xf6\x11\x11\x9cIH\x92\x98\xbe5\xa7\x91\t\xf3ig\x01ph\xa6J;\xa8M\xee\xa1Q\x9f\xc1\xf3\x82%\xe7\xdc,\xf9\x05xdRq\xea\xdb5US\'\xdb\xdd\xbaa\xb6d=\x1a\xac<\x8f\xd8\x8e\xe3g\xb3\xadncL\x9d\xb6\xe2\x1a\xda:\xd726\xb2\x99\xa8:\x8ehM{\xf7\x06\x9cI\x98*=\x8e\x17\xe6\xe7zDs\xef%1\xa24+\xd7<\x07\xe5,\xe2\xf9Tg\xf6\x93-t3>6Dej\x14?\xc8\x12\xc7\r\x94\xf2\xd0Z\xb7\xe4\xbf\x98\xe2\x86\xc0\xbea\x866o\xe4\xc4S^~\xd0\xfd%}\xe3\xed\x97\xbc\x0cj\xad\x93n\xe7\x1cZ\xe7\x89\x1a3\x8c<v/&\xa9\xe1\x87\x05</Kyb73\xd3\xa3K\x80\x8c\xd0~\xc8\xaa\xf5\xcf\x03gP^@yr/\xe3{\x1f\xc2\x9a\x98\xca\xc4.\xfc\xa6k\xfb~\x06u(\xd7]D:\xb0\x80B:\xcehy\x7f\xc9\x91^|\xces\xc1ZZ\xd9[D\xb06&\x8a\xa6\xf1\x82\x10\xa5\x9aZ\x97\xf4\x9eR\xdeA \xe3\xb8F&\xd7M\xff\x9ag\xf3\xc4\xee_P\x9b)Q\x99)1\xb1o\x1b:\xc81\xbe\xe7Wx\x99\xdcA|\x8e\x94L#\xa60\xb0\x92\rkZ\xb7?\x97\xdc6|\xf9K_@\x7fW\x81=\xd6\xe0\xb7p\x9fT\xdb\x07\xeb\xa9\x95p\xc6$\x14\x8a\x83h\xed3\xfc\xc8\x0f\x10\xcf\xc3\x18C\x1cM\xe3\x87\x05Lb\xb0RA-\xb5ws$4S\xe1\xb2+\x96\xde\x9b9\xa4o\xbc\xf5\xad\x7f\x03{\xc6\x8e\x9e9\x00\x0eQ>\xf5\xda\x04\xe5\xe9\xddxa\x1eO\x07\xd8\xa4\x86\xefe\xc0\xc4h,\nI\xebPgY\xe8F\x87\xb7\xaaq\xa0\xc4\xf2\xda\x0b_\xb6\xe43\x87l\x8e\x95\xf6O\xd0\xd3{\x1aj\xd5j\xf41\xec\xcb:k!\xaa \x8dZ\x8a!\x08\xd2\xb5N\xeb\xb4\xc3\xe0\x00\x97\xa4@\xcd\xec\'f6\r\x10\xadp\xa2\x11\xed\xe1D!\xe2\x81\xa7\x01\x05Z\x11\x97&\xb9\xe8\xc2s\xb8\xf1\x86\x8dG\x07\x14\xe0\xa3W\xfd\x0b\x97_\xf1i\xfc\xc1~ZN\xd8\xc3\x911\xd8\xa4\x8e}\xca\xd9\xb8\x13N\x87\xceA\xc8\xb6\x81x\x07\xd6I\x99\xddM3i\xbb"1\x10\xd7 \xaaA\xa3\x02\xd5I\xa46\x8d\xabL!\xb5)\xa42\x01\xb5)\xa8\x95q\x8d\nn\xcfn\xf6>\xb1\x95\xbe\xee\xce\xa3\x07\n\x10v\x9dN\xc3\xf7\xf03\x07g\x1c\x87#W\xaf\x90\x9c\xff>Xw:\xd4\xa6\xd3\x8f3\x0b\xf7LSQ\xd2\xfa7\x93_\xb8_**\xed\x1e(I\xaf\xa8f\xf1O:Ni\x8aw\x9d\x11r\xdd_\xb7\x8e\xb6\xcb\x02z\xf3W\xef\xe4\xa2\xd7]\x8a\xb7v\x1d\xb2\\\xab\x9a\x04\xa7\x14\xb6\xad\x17{\xd2\xf3\xe0\xe9/\x02\xed\xc1\xcc\xf8"I\x14L\x97\x90-\xdfF\x95K\x10\xd5\x0f(d\x16\xb0\x0ep~\x00~\x88\x0b\xf382\x14\xc2\x0e\xca?\xb8\xea\xb0b\x1c\xf1&\xd3\xdf\xbd\xe7*>\x7f\xdd\x97\xf0\xd7\x0e\x1c\xec\xc2\xd6\x80Mp&A\xe6\xea\xc8\xb4\x93\x80\xd0\xdc\xeb\x04\x99\x99\xc05*\xd8\x93\xcf\xc5\x9e\xf7\x16\xd0\xcd\x9e\x94si\x7fjd\x1b\xdew>\x838\x8b\xf3\xc3\xb4\x93\xa0\xe7G\xe2\xe6\x98\xce\x92$\x067\xb6\x97\xad\x0f\xde\xce3N=\xed\xf8\x01\x05x\xee\xf3_\xc5}[\x1e\xc5\xeb\xeaB\x92\x08\xa2*X\x8b\xcd\x14\xa0\xad\x13W\xec\xc1\x15\xfap\x856\xd0a\nD\x9a\x8a\x88\xea\x90D\xccFaw\xc2i\xe0g\x99_\xe9\x10\x84\x10\xc7\xc8\xf0f\xe4\xf1\x07\x90\xf1a\xa42\x8ex\x19\x08\xb2M\xc5\t\x160\xc3;\xf9\xc2W>\xcd\x9b\xdex\xe1\x11\xc9\xbe,\xa0\xc68\xd6\x9et\x16#;\xb6\xa3W?\x05\xbb\xe1,\xdc\xeag@\xd7 \x84\x85t\x1e9\xd2&\x97\xb3\xb0\xa0R\x9c\xed\xbe7\xfb\xa3Q\xfd\xc0\\\x9b\xa3\xe6n\xb2\x9f\x01/\x80F\x1d\xa6\xf7\xa0\xef\xbf\r56\x04^\x06#\n\xbbs;\xff\xf0\xe1wr\xd5\x95\x97\x1d\xa9\xe8\xcb\xdf\xf1\x8e\xa3\x06g\xbe\xf3V~\x11>\x05\xb26\x15x\xaeu\xb1\xc4\x89\x8b\x96\x9cY\xa4\x87\xe6\x11\x1d\x91\xb4\x1e\x16I\xc1\xfayd\xd3\x17\xf0\x1e\xb9\x97Xg`d\x98\x7f\xfc\xc8\xbb\xb8\xe2\xf2\xf7.G\xec\xa3;\xc3\xe0\x80?\xb9\xe6\xa7|\xff\xe1\xfd\xd0\x11rP\x83i\xc9\x17\x9bsWy\xe9G\xeb\xa6\x07$\xa9\xc2\xe2\nD\rhT\x91\xfa\x0cn|\x04\xfd\xf8}\xa8\xca8\xb1\xcb\xc0\xc4\x04_\xf9\xf2\xb5\xbc\xf1\xe2W.W\xe4c;~\xf3\xbe\xafm\xe3\x9a[\x1e\x86\xde<\x04\x87\xa82fY\x04Y\xc8\xad\x80\xe9\xbd\xc8\xe8\x10n\xcf\xa3\xa8\xbd\x8f 3\xe3H\xdc@Lc^\xfb$\rP&[\xc0\x0e\x8f\xd0\xb1\xb2\x97{\xbe{\x13\xa7<\xfd\xc4\xa3\x92\xf5\x98\x0fTMTb\xce\xbd\xfa\xc7l\xf9u\x19\xda\x02\xc8,\xceW\x05\xc2\xb643\xda~\x1fj\xcb]\xc8\xf8\xee\xf4D\x99\x17\xa4\xe0\xe7\x8a\x82y\x1b\xbc\x80+\xed\x87j\x8d\x8f|\xfc\xef\xb9\xfc\x03\x97\x1e\x8b\x98\xc7\xef\x88\xdc\xd7\x7f\xbe\x87\x0f\xdf\xf4\x10\xbf\x1ao\xa4\xd6\xcdh\xc8\xe6\xd2\x9e\xd8\x83w\xa0\x7f\xf1-\xc4Z\xc8\x84\xe9^\xebbwW\x825\x16\xd3\x88\xa0R\xc5\x97\x84\xd7\xbe\xfae\\\xfd\x89\x0f1\xb0\xb2\xe7\x98\xe5;n@g\xe9\xeem%\xfec\xd3N\xfeg\xeb4\xfc\xe8\x1b\xb0\xe5+\xa0\n\xd0\xbb\xea\xe0\xd6\x88s\x90$P.C}\x06Pt\xaf[\xcf;.}=\x97\xbe\xf9/\xe9^Ql\xc9\xe3h\xe8\xb8\x03\x9dO\x8fn\xdd\xcc\xa6\xff\xdb\xce=?y\x80\x91Gw\xb0ob\x92j\x14c\x9c\xc3W\x8a\xceB\x96\xde\xbe^N~\xd6\xc9\xbc\xe4\xec3\xf9\xd3\x97\xbe\x00\xbd\x8cb{9\xf4\xa4\x02]L\x891\xc4\x89\xc19\x87R\x8a0\xf0\x0f\xff\xd2q\xa2\xdf(\xd0\xdf&\xfd\xde\x1c5\xff\x03\xd0\xdf5\xfa\x7f\xe78d\x0e\x1e\xfb\xea\xd5\x00\x00\x00\x00IEND\xaeB`\x82')))

        img: PhotoImage = ImageTk.PhotoImage(binary_img, format='png')
        return img

    def load_start_image(self) -> PhotoImage:
        binary_img: Image = Image.open(io.BytesIO(bytearray(
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x009\x00\x00\x00?\x08\x06\x00\x00\x00ZA`\x98\x00\x00\x07\xb3IDATx\x9c\xed[Kh\x13]\x14\xfe\xa2m\x1em!\xad\xd8Z5\xb6El\x15li(\x98.\xc4\x85\xe0\x83>\x04u!U\xe9F\xea\xa2\xb8\x10E\xe8\xc6>\xd4\x85(h7\x15A\xacT\x85\x9a\xd0\xe2\xa2\xadK]\x14jE1\xf5\x81\xa5>04I_\x89\xd0\x18\x9b\x87M\x93\xf3o\x9c\xebL2\x99f&i\xfa\xa3~00\xcc\xbd\xf7\x9c\xef\xcb=s\xe7>NTDD\xf8\xc3\xb1f\xb5\t\xa4\x03\xffD\xfe)\xf8+Df\xa4\xcbQ0\x18D \x10@8\x1c\xc6\xda\xb5k\xa1\xd3\xe9\xa0\xd5j\xd3\xe2;)\x91D\x04\x95J%Zf\xb5Z144\x84\xb7o\xdf"\x14\n\xc1\xe5r\xc1\xef\xf7\x0bD\x16\x14\x14 33\x13\xe5\xe5\xe5\xa8\xaf\xaf\x87\xc9dJ\x86\x8e$\xd1\x94\xc0\xef\xf7\xd3\xc8\xc8\x08\xd5\xd4\xd4\x10\x00\xc5\xd7\xbe}\xfbhxx\x98|>_\xaa\xa8QJDvttPyy\xb9$\xf9\xe2\xe2b2\x1a\x8d\xb4k\xd7.\xaa\xac\xac\xa4\xe2\xe2b\xc9\xfa;v\xec\xa0\xd6\xd6V\n\x85B\xccO$\x12I\xbfH\x8b\xc5B\x1b7n\x14%y\xf0\xe0A2\x9b\xcdd\xb7\xdb\xc9\xe9t\x92\xc7\xe3!\x9f\xcfG\x81@\x80|>\x1fy<\x1e\x9a\x9a\x9a"\xbb\xddN}}}T[[+jg\xc3\x86\r\xf4\xf0\xe1C\x81_\xb9be\x89\x0c\x87\xc3DD499I&\x93)\x86PCC\x03=z\xf4H\x16\x81h\xf4\xf7\xf7\xd3\x89\x13\'blWVV\xd2\xd7\xaf_\x89h\x85D\xf2\x8d>}\xfa\x94\xb2\xb2\xb2\x04\x04jkk\xe9\xf9\xf3\xe7\xb2\x1c\x8b\xf9\xe0\xfb\x19\x1d\x1d\xa5\xc3\x87\x0f\x0b\xfch4\x1az\xf2\xe4I\\n\xf1 \xab\'o\xdf\xbe-p\x9a\x9b\x9bK/^\xbc\x90cB6\xde\xbcyC\xeb\xd6\xad\x13\xf8\xbdv\xed\x1a+\xe7\xa2K\n\t\x8blmm\x158jll\xa4\x1f?~\x10\x91\xf2\x01a9pv}>\x1f\x9d>}Z\xe0\xff\xdc\xb9s\t\xdb\x91\x14\xc99\xe9\xec\xec\x148hoo\x8f\xa9\xb3\x12\x88\x0e\xe1\xabW\xaf\nx\\\xbat)!;\xcb\xf6\xe4\xe0\xe0\xa0\xc0pOO\x8f\x80D\xba\xd1\xdb\xdb+\xe0c\xb1X\x96m#)\xd2\xedv\x93J\xa5b\x06/^\xbc\x982\xb2J\xc0\xbd\x7f\x97/_\x16\x08\x9d\x9d\x9d\x95l\')r\xfd\xfa\xf5\xccPsss\xea\xd8\xa6\x00\x17.\\`\xdct:\x1d\x11\xc5\x1f\x84bDr!\xd8\xd5\xd5%\x18\xba\x97\x96\x96$\rE\xdb\xe0_+\x85\x9c\x9c\x1c\xc6\xf1\xfa\xf5\xebq\xeb\x89\xf6\xe4\xf4\xf44\x15\x16\x162\x03\x9f>}beJHsmR%\x98\xb3\xe3p8\x18\xc7\xbc\xbc<6Y\x88\x86\xe8z\xb2\xbb\xbb\x1b\xb3\xb3\xb3\x00\x80\xc6\xc6F\x94\x96\x96\x82~m\x05\xc5[u\xf0\xe1\xf1xp\xf6\xecYttt \x14\n\xb16\x94\xa2\xed$\x95J\x05"\x82\xc1`@SS\x13\x00`~~\x1e===\xe2~\xc4\x94\x83\x17\xa6\xaf_\xbf\x96\xfdK\xef\xde\xbd\x9b\xd9\xd8\xb4iS\xcc\x08\x98\x8a\x1e\xe5^\x9b\xf1\xf1q\xca\xce\xcef\xfe\xc4\x10\xf3\xb4\xaf\xaf\x8f5\xa8\xab\xabSD@\xa7\xd3\xc5\xcc=\x8dFc\xd2S?>\xf8\xef;\x7f\xfaw\xe7\xce\x9d\x98\xba\xe07""\xc1\xc4\xfb\xf3\xe7\xcf\x8a\x08DO\xc3\xf8\xd7\xb1c\xc7\xd8 \xc6\xf7\x9b\x0c\xdcn7\xb3_UU\x15c[\xd0\x93\xd3\xd3\xd3\x02\x82J!%\x92\xbb\xda\xdb\xdbiqqQ\xb1\x8fhp!\xab\xd7\xeb\xd9\x00\xc4\x85\xb4@\xc9\x83\x07\x0f\x14\xcd\r\xa3\x91\x88H\xfcZ\x18\xdf\xbbwO\xd0Vi\xcf\xf2\xe7\xd6w\xef\xde\x15\xd8\x12\x8c\xae\x93\x93\x93\xec~\xef\xde\xbd\xf2\x86<\x05\x98\x98\x98\xc0\xa9S\xa7PUU\x05\x9b\xcd\x06\x00\x8aG\xe2\xea\xeajvo\xb7\xdb\x05e\x02\x91\x1f?~\x04\x00ddd\xa0\xb0\xb0P>k\x85\x18\x1b\x1b\xc3\xd6\xad[\xd1\xdc\xdc\x8c\xe9\xe9iE6\xb6l\xd9\x82\xec\xecl\x00\xc0\xfb\xf7\xef\x01\xf0>w\\w\x07\x83A\xaa\xae\xae&\x00TRRB\x0e\x87Ca\xb0&\x1e\xaebW~~>\xb5\xb6\xb6\xca\xf6977Geee\x04\x80***(\x10\x08\xb02&\xd2\xeb\xf5\xd2\xe6\xcd\x9b\t\x00\x99L&\n\x06\x83\xab"\x92\xbb\xd4j5=~\xfc8a\x9f\xe1p\x98\xf6\xec\xd9\xc3\x16\xf3\xf3\xf3\xf3\xac\x8c\x85k(\x14\xc2\xf7\xef\xdf\x01\x00YYY\xd0h4\x8a\xc2&UX\\\\\xc4\xd1\xa3Gq\xfc\xf8q\xcc\xcd\xcd-[\x7f\xcd\x9a5\xc8\xca\xca\x02\x00x\xbd^,--\xfd.\xe3n\x88\x88\x15dd\xa4mc}Y\x98\xcdftvv&T\x97\xe3\x1d\x89D\x10\x89D\xd8s&R\xa5R\xb1J\xfc_a\xb5\xc0\x9f#\x97\x96\x96&\xd4\x86\xe3\xadR\xa9\x04\xedY\x97effB\xaf\xd7caa\x01\xc1`\x10?\x7f\xfe\\\xd5\x90\xa5_\x9f\x90\x81\x81\x01\x1c:th\xd9\xfa\x91H\x04~\xbf\x1f\x00\x90\x9b\x9b\x8b\xcc\xccLV\xc6zR\xadV\xc3`0\x00\x00fff\xe0r\xb9RJZ\x0e\xd4j5\xce\x9f?\x0f"JH \x00|\xfb\xf6\x8d\xbd\xbb\x06\x83Ap\x98\xc4Dj4\x1a\x16\x16N\xa73\xa1\x97}%\xd0\xd0\xd0\x80W\xaf^\xe1\xc6\x8d\x1b\xb2\xda\xcd\xce\xce\xc2\xe9t\x02\x00\xb6m\xdb&\x10)\x18a\xb6o\xdf\x0e\x00\x08\x87\xc3\x98\x99\x99I\x96\xaf,\x94\x94\x94```\x00\x15\x15\x15\x8a\xda;\x9dN\x16\xae\x9c\r\xfau\xea&\x98\xf1\x14\x17\x17\xb3\xfbg\xcf\x9e)\xe5+\x0bz\xbd\x1e]]]\xb0\xd9l\x8a\x05\x02\xc0\xcb\x97/\xd9}QQ\x91\xb0\x90\xffAM\xe7*\x04\x00\xb5\xb4\xb4\x90\xc7\xe3Q\xec\x87\xe8\xf7$\\l\x15\xc2Ar=\xf9\xe5\xcb\x17E\x8e\xc5D\xf2\xb76\xeb\xeb\xeb\xc9\xe5r\t\x88&\xb3\xaet\xb9\\\xa2\xebI\x0e\x92;\x03\xf5\xf5\xf5\x8a\x9c\xe6\xe5\xe5\x89\xf6\\AA\x01\r\x0e\x0e\xb2z\x89\xec\xfcIA\xf6\xce\x80\xe0!o\x8f\xc7j\xb5\xcav\xce\xdfs\x01@999\xd4\xdd\xdd-\xdb\x8e\x14\xb8\x1f\xe8\xc3\x87\x0f\x82S61\x88>\xbdr\xe5\nk\xd4\xd8\xd8(\x9b\x00\x7f\x01\xdb\xd2\xd2Bn\xb7\x9b\x88R{\xac\xc0\xd9jjjb\xbe\xda\xda\xdaD\xfd$\xb4\xef:11\xc1\x1a\'Jt||\x9c&\'\'\x05\xa4R\xbd\xefj\xb7\xdb\x19\xc7\xbc\xbc<\xb2\xd9l\xa2\xf5\xe3\xee\xa0\xdf\xbau\x8b\x19\xd0j\xb5\xb2v\xd0\xd3\x05\xbd^\xcf8\xca\xdeA\xe7\x90\x9f\x9f\xcf\x8c\x9c9s\x86\x88V\xe7$K\x0c\xfc\xb3\x10\xadVKD\xf1\xb9I\x8a\xe4\x0f\xcd\xc0\xea\x9fjq\xd1\xc4\x1f3\x80$O\xb5\x88b\xcf\'\xef\xdf\xbf\xcf\xcaV#t\xa3\xcf\'\xcdf3\x11IGXB\'\xcd7o\xde\x8c\xd93\xe5\xb0\x92B\xe5\x9c4+\x16\xc9\x87X\xce\x80\xd7\xeb]\xd6A2HK\xce\x00\x07\xae\xb7V#\xfbcllL2\xfb#\x11\xa4$\x8f\xa7\xa6\xa6\x86FFF\xe4\xb1\x8fBt\xd8\x8f\x8e\x8e\xd2\x91#G\x04~4\x1a\r\r\r\r\xc9\xb6\x9dp\xb8F"\x116\xbaIed\xf5\xf6\xf6\xca&\xc1G\x7f\x7f?\x9d<y2\xc66?#K.V,\xb7\xee\xc0\x81\x03d\xb1X\xc8\xe1p\xd0\xd4\xd4\xd4\xb2\xb9u\xf1\xb2+\xc5r\xeb\xd2*\x92CGG\x07\xed\xdc\xb9Sr\xedXTT\xc4\xb2$\x8dF\xe3\xb2Y\x92eee\xd4\xd6\xd6\x96\x92c\xbe\xa4D\xf2\xdf#\x9f\xcf\x97\x92|\xd7\xfd\xfb\xf7\xd3\xf0\xf00-,,$-\x8e\x83\x8aH\xf9A>\xd7T,\x8f\xc0j\xb5bpp\x10\xef\xde\xbd\x93\xcc\\V\xab\xd5(//G]]]L\xe62IdF\xcbAR"\xc5\x10\x8fX\xa29\xe8\xa9\x12\xc6G\xcaE\xfe\x1f\xf1W\xfce\xe2\x9f\xc8?\x05\x7f\x85\xc8\xff\x00\xe4\x88\x8b7@d\xbc~\x00\x00\x00\x00IEND\xaeB`\x82')))

        img: PhotoImage = ImageTk.PhotoImage(binary_img, format='png')
        return img

    def load_pause_image(self) -> PhotoImage:
        binary_img: Image = Image.open(io.BytesIO(bytearray(
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00:\x00\x00\x00@\x08\x06\x00\x00\x00K\x02d\x8f\x00\x00\x07\xc2IDATx\x9c\xed[ML\x13M\x18~K\xa5\xb5EhSkB*\x12E\x04\x12jQ\x84\xa8\x11\x15\xc2\xc1\x83G\x13\x0fz\xf0\xff\xa2h\xa2B\x8c\x01\x89!1\xda\x13\xf1\x87\x83\x1e\xaa\t\x89r\x10\x93&j\xa3\x97\x9a\x80J\x08\xda\xc4\x8a\xd4\xb6\x07\xa5\xd2\x96\xd2`+ ji\xdf\xef\xf0};\xd9\xe9n\xcbn\xff>\xff\x9e\xa4\xc9\xb0\xf3\xfe<\xcf\xec\xec\xec\xec\xcc AD\x84?\x00y\xff7\x81\\\xe1\xaf\xd0\xdf\rY\x15\x8a\x88 d\x08`\xdbdk\xc8X\x92\x8d\xa0\xb1X\x0c$\x12\tH$\x12A\xf6B\xed\xd2\x81$\x9b\xa3n0\x18\x84\xfb\xf7\xef\xc3\xf0\xf00\xf8|>\x00\x00\x88F\xa3\x00\x00 \x95JA"\x91\x80N\xa7\x83\xcd\x9b7\xc3\x9e={@\xa3\xd1d\x8b\n\x00f\x10\x13\x13\x13\xf8\xf0\xe1C\xdc\xb5k\x17\x02@J\xbf\xdd\xbbw\xa3\xc5bA\x9f\xcf\x97Ij\x98\xb2\xd0X,F\xca\x1e\x8f\x07[[[Q\xab\xd5\xa6,0\xfeW\\\\\x8c\xe7\xcf\x9fG\xbf\xdf\xcf\x9b3\xebB\xd9\xc9"\x91\x08\xb6\xb4\xb4\xf0\x12U\xab\xd5\xb8c\xc7\x0e\xbcs\xe7\x0e\xba\xddn\x0c\x87\xc38;;\x8bsss877\x87333\x18\x0e\x87\xd1\xe1p\xa0\xc9d\xc2\x86\x86\x06T\xa9T\xbc\xb1Z[[\xd3\x12)Zh4\x1a%e\x93\xc9\x84\x05\x05\x05\x14\xa1\xa2\xa2"<|\xf80>~\xfc8eBf\xb3\x19\x0f\x1e<\x88J\xa5\x92\x8a\xadR\xa9\xb0\xb7\xb77\xe5\xb8)u\xdd\x93\'OrZ\xbd\xbd\xbd\x1d\'&&R&\x12\x0f\x8f\xc7\x83g\xce\x9c\xe1\xe49{\xf6lJ\xf1\x04\t]XX@D\xc4P(\x84\xa5\xa5\xa5T\xe2\xad[\xb7R\xb6\xe9v1>\xd4\xd5\xd5Q9\xd7\xae]\x8b333\xa2\xf2-*\x94\xe9\xae\x81@\x00\xcb\xcb\xcb\xa9\x84}}}i\xd0\x17\x87\xdb\xb7oS\xb9\xf5z=\x06\x83A\xc1\xfeI\x852\xad5==M=\x8f\xf9\xf9\xf9\xf8\xe5\xcb\x17\x8e]\xb6\x11\x08\x04P"\x91\x10\x1e\xcb\x97/\xc7p8,\xc8WP\xd7\xad\xaf\xaf\'\xc1W\xacXAZ\x92=8e\x1bLcNMM\xa1Z\xad&|v\xee\xdc)\xc8\x7fQ\xa1\xa7N\x9d\xa2\xba\x0c\x83H$\x92\x1a\xe34\xc0nX6\xa7\xb6\xb66r=Q\xefJ*\xf4\xee\xdd\xbb$\x98L&\xc3O\x9f>%\r\x96\x0b0\xb9].\x17.Y\xb2\x84\xf0{\xf0\xe0ARn\x1c\xa1lC\xb9\\N\x02\xf5\xf4\xf4$\r\x94(\xc6b>bl\xe3m._\xbeL\xf8-[\xb6,\xa9OB\xa1\xfb\xf6\xed\xe3<\x07b\xee\xa4\xd3\xe9\xc4\x81\x81\x81\xa4\xcf3smrr\x12\x07\x06\x06\xd0\xe5r\t\x8e\xcf\xa0\xb6\xb6\x96\xf0<v\xecXB;\xde\xae\xebr\xb9\xa8\xe9\x98\xc7\xe3\x11\x95\xfc\xca\x95+XXX\x88\x00\x80\xabW\xaf\xc6\xc1\xc1\xc1\x84\xb6V\xab\x15KJJ\xc8\xcc\xaa\xbb\xbb\x1b\x11\x857\xaa\xdb\xed\xa6\x06\xca\x8f\x1f?\xf2\xda\xf1\n\xed\xec\xec$\xce\x1d\x1d\x1d\x82\x1220\x9b\xcd\xbc\xf3U\xbew\x9e\xdf\xef\xe7\xb5\xb5X,\xa2r\xb6\xb5\xb5\x11_\xa3\xd1\xc8k\xc3+\x94\xdd\xef\x9dN\xa7\xa8\xa4\xecFb\xffFGG9\xb6/_\xbe\xe4\xb5\xed\xec\xec\x14\x95\xd3n\xb7\xa3B\xa1\xe0\xbc\x19\xd8 K)\xf8\xdf\xf7\xf7\xc8\xc8\x08s\t\x0c\x06\x03\xac[\xb7\x0e\xc4 ??\x9f\xf7\xfa\x8f\x1f?8\xd7"\x91\x88\xa8\x18\x89\xa0\xd7\xeb\xa1\xb2\xb2\x92\xfc\xfd\xfe\xfd{\x8e\rg\xcd\xa8\xa3\xa3\x83\x94{zzD%L\x06\xbe\xe5\x12\xa9T\x9a\xb1\xf8\xdd\xdd\xdd\xa4|\xee\xdc9N=\x11\xca\x10q\xbb\xdd\xa4r\xc3\x86\r\x19#\xc2\x07\xcc\xe0*Ncc#)\x8f\x8d\x8dq\xea\xa9;\xfa\xfa\xf5k\x98\x9c\x9c\xe48\xfe*\xa8\xab\xab\x03\x00\x80@ \x00\xef\xde\xbd\xa3\xea(\xa1\x0e\x87\x03fgg\x01\x00\xa0\xb9\xb99G\xf42\x87\xa6\xa6&\x00\x00\x08\x85B\xe0p8\xa8:J\xa8\xd7\xeb%\xe5\xaa\xaa\xaa\x1cP\xcb,\xea\xeb\xebIy||\x9c\xaa\xa3\x84\xb2GF\x99L\x96eZ\x99\x07{p\xfb\xfe\xfd;UG\te\xba-\x00\x80B\xa1\xc82\xad\xccc\xe9\xd2\xa5\xa4\x1c\xff:\xa3\x84\xb2\xdfk\xbf\xfa\x1de\x16\xca\x19PB\xd9/\xea\x85\x85\x85,\xd3\xca<\xd8\xe2\xe2\xdf\xd1\x94\xd0\xc2\xc2BRfw\xe3_\x05\xdf\xbe}#e\xb9\\N\xd5QB\xd9\xdd\x95o\xca\xf6\xb3\x83=\x00%\x15\xaa\xd3\xe9H\x99ov\xf1\xb3\xc3f\xb3\x91rii)UG\t5\x18\x0c\xa0R\xa9\x00\x00\xc0l6\xe7\x80Zf\xc1p\xd6j\xb5PSSC\xd5QB\xab\xab\xabA\xab\xd5\x02\xc0\xbf\xd3\xc1_\rN\xa7\x13\x00\x004\x1a\r\x94\x95\x95Qsi\xce\xd7\x0b\xbb%\x9e>}\x9a\x03z\x99A__\x1f)o\xd9\xb2\x05\x00\xe8/&\x8e\xd0\xf6\xf6vR\xbet\xe9\x12\x00d\xe6+\x83/F,\x16K;.\x83k\xd7\xae\x91\xf2\xc5\x8b\x179\xf5\x1c\xa1\xb5\xb5\xb5\xa4<<<\x0cv\xbb]\xd4\xd6{\xfc\x8b\x9a\x01\xdf\xc7t\xa2I\x89\xd8\x86\x1d\x19\x19\x81W\xaf^\x91\x98k\xd6\xac\xe1\r\xca\x81\xd1h$\xcb\x12---\xa2\x965\xacV+giD&\x93Q[\x18\x0c\xc2\xe10\xefR\xca\xd0\xd0\x90\xa8\x9cG\x8e\x1c!\xbe\xcc\xe2Z<x\x85\xba\xddnj\x15P\xec\xc2uoo/\xb5\xeed\xb5Z\x13\xdaZ,\x16j_\xa7\xbf\xbf_P\x0e\x06\x1e\x8f\x87\xf8j\xb5Z\xe1\xab\x80\x8c\x98\x0b\x17.\x90\x00\x1b7n\xe4\xd4\x0b\x81\xd7\xebM\xea\xc7\xbe&\xe6\xcc\x02\xdb\xaf\xa2\xa2\x82\xf0\xec\xea\xeaJ\xe8\x93t\xa5\x9e\xdd\x9dn\xdd\xba\x85\x88\xc26\x96\xf8V\xdf\x13\tMe\xa5\x9e\xe1p\xf5\xeaU\xde}!>$\xad\xb5\xd9lT\xa0G\x8f\x1e%%\x9em\xb0\xf3\xf6\xf7\xf7S\xdc\x1c\x0e\x07\xb1\xe1\xc3\xa2\xbbi\x07\x0e\x1c \xc1\x14\n\x05\xd9i\xce\xe5\x96!\x03FD0\x18D\xa9TJx\x1d?~|Q_A\xfb\xa3\xec\xfd\x8d\x92\x92\x12\xb2G\x92\xcb\xbb\xca\xe4\x1a\x1d\x1d\xc5\xe2\xe2b\xc2g\xd3\xa6M\x82\xfc\x05\xedx#"\x96\x95\x95\x91\xe0\x1a\x8d\x06\x9f={\x96\x06\xed\xd4\xf0\xe4\xc9\x13,**"<***\x04\xfb.zG\x19\xb1\xa1P\x88:\xc3 \x91H\xd0d2Q\xb6\xd9\xec\xce\xd7\xaf_\xa7\x9e\xc9\xca\xcaJ\x9c\x9f\x9f\x17\xec/\xeaT\n"\xa2\xc1`\xa0\x12n\xdb\xb6\x8d\xda\x9fIw\xa0\x8a\xf7\x1f\x1b\x1b\xe3\x9cJ\xa9\xad\xad\xa5\xec\x85@\x90\xd0\xf8\xe4\xec\x99\x08\x00\xa0R\xa9\xc4C\x87\x0e\t\xd5"\x08\xd1h\x14\xf7\xef\xdfOmF\x03\x00\x9e8q\x82\xe2%\x14\xa2\x0eT\xb1\x03\x0f\r\r\xa1F\xa3\xe1L\xdf\x9a\x9b\x9b\xf1\xc5\x8b\x17\xd4\x19>\xa1\xf0\xf9|888\x88\xdb\xb7o\xe7\xc4\xd5h4h\xb3\xd9D\xc7d\x90\xd61\xd6\xf9\xf9y\xb8y\xf3&\x9c>}\x9aS\xb7r\xe5Jhll\x04\x9dN\x07\xeb\xd7\xaf\x87\xaa\xaa*X\xb5j\x15(\x95J@D\xf8\xfa\xf5+\x8c\x8f\x8f\x83\xd3\xe9\x84\xb7o\xdf\x82\xc7\xe3\x01\xab\xd5\n~\xbf\x9f\x13\xeb\xc6\x8d\x1bp\xf4\xe8Q\xce\xf2\x88(\xa4\xdaB\xec\x81gzz\x1a\xbb\xba\xba8\xe7\xf7\xd8\xbf\xbc\xbc<\x94\xcb\xe5\xa8P(P\xa1P\xa0\\.\xc7\xbc\xbc\xbc\x84\xf6\n\x85\x02\x8dF#\x86B!\x92\'\x9dg?\xe3\x07\x93\xef\xdd\xbb\x07\xcf\x9f?\x07\xab\xd5\xca\xd9\xe8Y\x0cz\xbd\x1e\x9a\x9a\x9a\xa0\xa1\xa1\x01\xf6\xee\xdd\x9bIZ\x99;\x81\x8d\x88\xd4w\xeb\xe7\xcf\x9f\xc1\xeb\xf5\xc2\xd4\xd4\x14\xbcy\xf3\x06\xecv;|\xf8\xf0\x81,\xa3\x16\x14\x14@yy9TWWCMM\rh\xb5Z\xd0\xe9t\xa0V\xab3A\x87\x83\xac\x1c5\x8f\x17\x9d+\xdfd\xc8\xea\x99\xfa\x9f\t\x7f\xff\xef\xe5w\xc3_\xa1\xbf\x1b\xfe\x18\xa1\xff\x003\x8b\x8eBl0\x9av\x00\x00\x00\x00IEND\xaeB`\x82')))

        img: PhotoImage = ImageTk.PhotoImage(binary_img, format='png')
        return img

    def load_stop_image(self) -> PhotoImage:
        binary_img: Image = Image.open(io.BytesIO(bytearray(
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00B\x00\x00\x00@\x08\x06\x00\x00\x00\xae\x9c\xa1\xe3\x00\x00\x08EIDATx\x9c\xed[mHS\xdf\x1f\xff\xceM\xdd\xd4\xca\xe6\xb3\xd3--)\xd1\x12M\xc1\x87\xb4\xc0\x8c\x8aB4\x0c\x89\x12\x93\xa2\xf2\x95\x85\x11\xd1+\xc9\xb0\xa0\x07\rB\xa2\x07\x88\x88\x1e0z!je\x88f\xa4&*\xa9$em\xa15\x19\x13\xb7\xb4\xcd97\xbf\xbf\x17\x7f\x8b\xff:\xe7\xde\xddmw\xcb\xc0\x0f\x9c7\xdf\xfb9\xdf\xef\xe7|vwvw\xce\xb9\x02DDX\x06x\xfdm\x01K\x05\xcbF,B\xe4\xc9bf\xb3\x19\x8cF#LLL\xc0\xd8\xd8\x18LMM\x81\xc9d\x02\x91H\x04R\xa9\x14\xa2\xa3\xa3!22\x12\xfc\xfd\xfdA"\x91xR\x9a\xfb\x8dP*\x95\xd0\xdc\xdc\x0c\xc3\xc3\xc3\xf0\xee\xdd;\x18\x1f\x1f\x87\xb9\xb990\x1a\x8d`\xb5Z\x7f\xf3\xbc\xbc\xbc\xc0\xcf\xcf\x0f\xc4b1\x04\x07\x07Czz:$$$\xc0\x8e\x1d;`\xd3\xa6M\xee\x96\t\x80n\x80J\xa5\xc2\xcb\x97/c||<\x02\x80\xcb-,,\x0c\xcf\x9f?\x8f\xbd\xbd\xbd\xee\x90\x8b\x88\x88\xbc\x1a\xa1\xd3\xe9\xb0\xa4\xa4\x04CBBx1\xe0\xcf&\x16\x8b1??\x1f\xbb\xbb\xbb\xf9\x94\x8d\x88<\x19\xa1T*\xf1\xd8\xb1cn\x19<S\xcb\xcf\xcf\xc7O\x9f>\xf1!\x1f\x11y0\xe2\xd9\xb3g(\x95J\x1d\x1eHpp0fgg\xe3\x9e={p\xfb\xf6\xed\x18\x15\x15\xe5p\x0e\xa9T\x8aeee|\xf8\xe0\xbc\x11V\xab\x15\xf3\xf3\xf39\t\x96\xcb\xe5XPP\x80w\xef\xdeE\x9dN\x87\xd3\xd3\xd3h2\x99l\xf2\x99\xcdf\x9c\x9e\x9eF\x83\xc1\x80\x8d\x8d\x8dx\xe0\xc0\x01\xdc\xb0a\x03\n\x85B\xbb\xf9333Q\xa3\xd1x\xde\x08\xadV\x8biii\xac\xe2\x84B!\x96\x97\x97c[[\x1b\x1a\x8dF\xa7\x05vww\xe3\xd9\xb3g1,,\x8c\xb5\xde\xca\x95+\xb1\xab\xab\xcb\xe9:\x0e\x1b\xf1\xe5\xcb\x17T(\x14\xac\xa2JKKqbb\xc2iQ4LMM\xe1\xc5\x8b\x17Y\xebJ$\x12loow*\xbfCF\x8c\x8e\x8e\xb2\n\xc9\xc8\xc8@\xa5R\xe9\x94\x10\xae0\x99Lx\xe8\xd0!V\x1dO\x9f>u8/g#L&\x13n\xdc\xb8\x91\xb1xEE\x05\xf1\xbdw\'\xea\xea\xea\x18\xb5x{{\xe3\xd0\xd0\x90C\xf98\x1b\x91\x94\x94\xc4X\xf8\xf5\xeb\xd7\x0e\x0f\x84\x0f\xf4\xf4\xf4\xa0\\.\xa7j\x8a\x88\x88p\xe8\xee\xe4dDee%\xb5\x98H$\xc2\xa6\xa6&\xa7\x07\xc2\x07\xa6\xa6\xa6P"\x91P\xf5\xe5\xe5\xe5q\xcec\xd7\x88\xd6\xd6V\xc6;\xe1\xd5\xabW.\r\x82/\x0c\x0c\x0c`PP\x90K\xf3\x05\xab\x11f\xb3\x99\xf1+q\xfd\xfau^\x06\xc1\x17zzz\x18\xe7\x8b\xb1\xb11\xbb\xfd\x05\x88\xcc+T\xb7o\xdf\x86\xa3G\x8f\x12\xf1\xe2\xe2bx\xf8\xf0!S7\x98\x9e\x9e\x86\x9f?\x7f2^w\x16\xde\xde\xde\x10\x12\x12\xc2x\xfd\xca\x95+PYYI\xc4\xcb\xcb\xcb\xe1\xc6\x8d\x1b\xec\xc9\x99\x1c2\x1a\x8d\x18\x10\x10@8\x1c\x15\x15\x85z\xbd\x9e\xd1\xd9\x8a\x8a\n\xce\x8f\xc8\xce\xb4\x82\x82\x024\x18\x0c\x8c\xf5\xb7m\xdbF\xed7::\xcazG0\x1aQ__OM\xd8\xd0\xd0\xc0\x98\xac\xa3\xa3\xc3\xad&\xfcj\xb5\xb5\xb5\x8c\x1a\xba\xbb\xbb\xd1\xc7\xc7\x87\xe8s\xe2\xc4\t\xc7\x8d0\x18\x0c\xb8y\xf3f"\x99L&cMV[[\xeb\x11#\n\x0b\x0bYu\x1c>|\x98\xdaO\xadV3\xf6\xa1\xaeY\x0e\x0c\x0c@__\x1f\x11\xaf\xaf\xaf\xa7\xd1\x7f\xc3\xc7\xc7\x87\xf5:_\x10\n\x85\xac\xd7\xab\xaa\xaa\xa8\xf1\xd6\xd6V\xc6>T#\xda\xda\xda\x88XBB\x02\xe4\xe4\xe4\xb0\nX*\x88\x8e\x8e\x86\xa4\xa4$"\xfe\xe8\xd1#\xc6>T#.]\xbaD\xc4\n\x0b\x0ba\xd5\xaaU.\xc8\xf3,\xae]\xbbF\xc4\xfa\xfb\xfbA\xa9TR\xf9\x84\x11:\x9d\x0e\x0c\x06\x03A\xfcW\xee\x86_\x90\xc9d\xc4O\xadF\xa3\x01\x95JE\xe5\x13F\xbc}\xfb\x96 \xadX\xb1\x02\xb2\xb2\xb2x\x92\xe8\x19\xc4\xc5\xc5AJJ\n\x11\x1f\x1e\x1e\xa6\xf2\t#\x06\x07\x07\tRll\xac\xc7\xf7\x19\\\x85@ \x80u\xeb\xd6\x11\xf1\x81\x81\x01*\x9f\xfa\xd5\xf8\x13R\xa9\x94\x07i\x9eGjj*\x11knn\xa6r\t#\xd4j5A\x92\xcb\xe5<\xc8\xf2<h\x1f\xa0^\xaf\xa7rm\x8cXXX\x00\xadVK\x90h?E\xff\x02\xfc\xfc\xfc\x88\xd8\xfc\xfc<\x95kc\x84\xc5b\x01\xa3\xd1H\x90\xd8\xfe\xe8,e\x04\x04\x04p\xe6\xda\x18\xe1\xe5\xe5\x05\xde\xde\xde\x04\x89f\xce\xbf\x00\xb3\xd9\xcc\x99kc\xc4\xaf]\xe9?122\xe2\xba\xaa\xbf\x80\x1f?~\x101\x91\x88\xbe\xefML\x96\x11\x11\x11\x04\xe9\xc3\x87\x0f<\xc8\xf2<L&\x13\x11\xe3lD`` A\x9a\x9d\x9du]\xd5_\xc0\xfb\xf7\xef\x89Xff&\x95K\x18\x11\x1f\x1fO\x90FFFl\xce2\xfc+\xa0\xdd\xc9;w\xee\xa4r9\x19199\t\xa3\xa3\xa3<H\xf3\x1c\xf4z=|\xfe\xfc\x99\x88\x87\x87\x87S\xf9\x84\x11\xc9\xc9\xc9T\xe2\xf3\xe7\xcf]\x94\xe6Y\x0c\r\r\xc1\xd0\xd0\x90ML*\x95Bzz:\x95O\xfd\x1b\xbeo\xdf>"\xd6\xd2\xd2\xc2\x83<\xcf\xa1\xa9\xa9\x89\x88)\x14\n\x88\x8c\x8c\xa4\xf2\xa9F\x1c<x\x90\x88uttP\xff\x90-U\xd0\xd6T\xf6\xee\xdd\x0b\xfe\xfe\xfeT>\xd5\x88\xcc\xccL\x88\x8d\x8d\xb5\x89\xcd\xcd\xcd\xc1\x85\x0b\x17X\x8b[,\x16\xae:]\x82\xbd:L:\xf7\xef\xdf\xcf\xd8\x87jDhh(\xec\xde\xbd\x9b\x88?y\xf2\x04\xc6\xc7\xc7\x19\x93\x05\x05\x05\xb1\n\xe4\x0bk\xd7\xaee\xbc699\t7o\xde$\xe2\xa9\xa9\xa9\x90\x90\x90\xc0\x9c\x94iU\xf7\xe3\xc7\x8f\xd4\x95\xe0\xdc\xdc\\\xc6\x95\xe0\xf9\xf9y\x8c\x89\x89q\xeb\n\xb6L&\xc3\xe1\xe1aF\r\xa7N\x9d\xa2\xf6{\xf9\xf2%\xeb\xca7\xebNWQQ\x11444\x10\xf1;w\xee@YY\x19\xb5\x8f^\xaf\x87[\xb7n\x81F\xa3\xb1\xbb\xda\xec\x08\x16\x16\x16\xc0\xc7\xc7\x07\x8e\x1f?\x0e\xd1\xd1\xd1T\xce\xd7\xaf_!&&\x86\x88o\xd9\xb2\x05:;;\xd9\x0b\xb0\xb9\xa4\xd5j188\x98\xeap\x7f\x7f?\xab\xc3\x9e\xc6\xe4\xe4$\xfa\xfa\xfaR\xb5\xb6\xb4\xb4\xd8\xedow7\xbc\xaa\xaa\x8a\x9a<&&\x06gffx\x19\x04\x1f\xd8\xb5k\x17U\xe7\x91#G8\xf5\xe7t>"\'\'\x87Z$11\x91\xd3N\xb3\xbbQXXH\xd5\x17\x1a\x1a\xca\xf9 \x1b\'#t:\x1d\x8aD"j\xb1\xf0\xf0p\x9c\x9d\x9dui \xce\xc2b\xb1`II\tU\x97@ \xb0;A\xfe?8\x1f\x1djlld\x9c\xc9\xe3\xe2\xe2\xb0\xaf\xaf\xcf\xa9\xc18\x0b\xadV\x8b\xc9\xc9\xc9\x8c\x9a\xea\xeb\xeb\x1d\xca\xe7\xd0\xa9\xba\x07\x0f\x1e\xb0\xfe\xb4UWW{\xe4@\xd9\xe3\xc7\x8fYu\x9c<y\xd2\xe1\x9c\x0e\x9f\xb3<w\xee\x1c\xab\x88\x8c\x8c\x0c\xec\xec\xectX\x08\x17|\xff\xfe\x1d\xf3\xf2\xf2X\xeb\x97\x96\x96:\x95\xdb\xa9\x93\xb7\xf6\xee\x0c\x00\xc0\xf5\xeb\xd7\xbb|\xea\x16\x11qnn\x0e\x07\x07\x07177\xd7n\xcd\xd3\xa7O;]\xc7\xe9\xb3\xd8\xed\xed\xed\x18\x18\x18hW\\ZZ\x1a\x9e9s\x06[[[Q\xadV\xa3\xd5j\xb5\x9b[\xab\xd5\xe2\x9b7o\xb0\xa6\xa6\x06\xb7n\xddj\xb7\x86D"\xc1{\xf7\xee9;\x14D\xb4\xf3di\x0f333PTT\x04/^\xbc\xe0\xc4\x97J\xa5\x10\x1a\x1a\n\xb1\xb1\xb1 \x93\xc9\xc0\xd7\xd7\xf7\xf75\xab\xd5\nj\xb5\x1aT*\x15h4\x1a\xd0h4\x9cr\xca\xe5r\x18\x1c\x1ct}\xa7\xde%\x1b\x17QWW\xc7\xdb\xdb:\\[PP\x10^\xbdz\x95\x0f\xf9\x88\xc8\xe3\x1b<333XSS\xc3x\xf8\x93\xcfV^^\x8e\xdf\xbe}\xe3K:"\xf2\xfc*\x13\xe2\xff\x1er\xee\xdf\xbf\x8f)))\x8c\xcf\xfe\xce\xb4\xc4\xc4D\xac\xae\xaeF\x8b\xc5\xc2\xb7dDtq\x8e\xb0\x87\xde\xde^\xe8\xe8\xe8\x80\xa6\xa6&hoow\xb8\x7fbb"\x14\x17\x17CFF\x06dee\xd9\xcc)|\xc3\xadF\xfc\x89\xae\xae.\x18\x1b\x1b\x03\xa5R\tZ\xad\x16L&\x13\x08\x04\x02XXX\x00\xb1X\x0c\xabW\xaf\x06\x85B\x01k\xd6\xac\x81\xec\xecl\xf0\xf2\xf2\xdc\xfb\xb9\x1e5b)c\xf9\x95\xe8E,\x1b\xb1\x88e#\x16\xf1\x1f\xc2\x9c\xf2\x01\tDD\x18\x00\x00\x00\x00IEND\xaeB`\x82')))

        img: PhotoImage = ImageTk.PhotoImage(binary_img, format='png')
        return img


    # Convert icon image to bytes, store it in a temp path
    # Used website: https://codebeautify.org/image-to-base64-converter
    def load_icon_image(self) -> str:
        icon_str:str = ''

        # To base64 format
        icon_data:bytes = base64.b64decode(icon_str)

        # Make a temp file path to be returned
        _, file_path = tempfile.mkstemp()
        with open(file_path, 'wb') as icon_file:
            icon_file.write(icon_data)

        return file_path

    def widgets_pre_start(self) -> None:
        self.window_init()

    def window_init(self) -> None:
        # Create the root window
        self.window = tk.Tk()
        self.window.resizable(False, False)
        self.window.title("PowerUp")

        self.window.config(background=self.default_bg, border=1)

        # Set window icon
        icon_path: str = self.load_icon_image()
        self.window.iconbitmap(default=icon_path)

        # Set the window offset position
        self.window.geometry("+600+400")

        # Override the close button handler
        self.window.protocol("WM_DELETE_WINDOW", self.exit)

    # Prepare for GUI start
    def init_gui(self) -> None:
        try:
            self.widgets_pre_start()
            self.widgets_design()
            self.widgets_position()
            self.widgets_init_list()
            self.logger.info("GUI is inited successfully")

        except Exception as exp:
            self.logger.critical("Error in GUI init phase:")
            self.logger.critical(f"{str(exp)}")

        # Cyclic task calling
        self.window.after(0, self.cyclic_update_1000ms)

    def gui_mainLoop(self) -> None:
        self.window.mainloop()

    # Class entry point
    def show_gui(self) -> None:
        self.init_gui()
        self.gui_mainLoop()



def main()-> None:
    GUI_Handler().show_gui()


# Entry point
if __name__ == '__main__':
    main()